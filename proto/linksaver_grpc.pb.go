// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/linksaver.proto

package linksaver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LinkSaver_Save_FullMethodName       = "/linksaver.LinkSaver/Save"
	LinkSaver_PickRandom_FullMethodName = "/linksaver.LinkSaver/PickRandom"
	LinkSaver_PickAll_FullMethodName    = "/linksaver.LinkSaver/PickAll"
	LinkSaver_IsExists_FullMethodName   = "/linksaver.LinkSaver/IsExists"
)

// LinkSaverClient is the client API for LinkSaver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkSaverClient interface {
	Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveResponse, error)
	PickRandom(ctx context.Context, in *User, opts ...grpc.CallOption) (*Page, error)
	PickAll(ctx context.Context, in *User, opts ...grpc.CallOption) (*PageList, error)
	IsExists(ctx context.Context, in *Page, opts ...grpc.CallOption) (*ExistsResponse, error)
}

type linkSaverClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkSaverClient(cc grpc.ClientConnInterface) LinkSaverClient {
	return &linkSaverClient{cc}
}

func (c *linkSaverClient) Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveResponse)
	err := c.cc.Invoke(ctx, LinkSaver_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkSaverClient) PickRandom(ctx context.Context, in *User, opts ...grpc.CallOption) (*Page, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Page)
	err := c.cc.Invoke(ctx, LinkSaver_PickRandom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkSaverClient) PickAll(ctx context.Context, in *User, opts ...grpc.CallOption) (*PageList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PageList)
	err := c.cc.Invoke(ctx, LinkSaver_PickAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkSaverClient) IsExists(ctx context.Context, in *Page, opts ...grpc.CallOption) (*ExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, LinkSaver_IsExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkSaverServer is the server API for LinkSaver service.
// All implementations must embed UnimplementedLinkSaverServer
// for forward compatibility.
type LinkSaverServer interface {
	Save(context.Context, *SaveRequest) (*SaveResponse, error)
	PickRandom(context.Context, *User) (*Page, error)
	PickAll(context.Context, *User) (*PageList, error)
	IsExists(context.Context, *Page) (*ExistsResponse, error)
	mustEmbedUnimplementedLinkSaverServer()
}

// UnimplementedLinkSaverServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLinkSaverServer struct{}

func (UnimplementedLinkSaverServer) Save(context.Context, *SaveRequest) (*SaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedLinkSaverServer) PickRandom(context.Context, *User) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PickRandom not implemented")
}
func (UnimplementedLinkSaverServer) PickAll(context.Context, *User) (*PageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PickAll not implemented")
}
func (UnimplementedLinkSaverServer) IsExists(context.Context, *Page) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExists not implemented")
}
func (UnimplementedLinkSaverServer) mustEmbedUnimplementedLinkSaverServer() {}
func (UnimplementedLinkSaverServer) testEmbeddedByValue()                   {}

// UnsafeLinkSaverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkSaverServer will
// result in compilation errors.
type UnsafeLinkSaverServer interface {
	mustEmbedUnimplementedLinkSaverServer()
}

func RegisterLinkSaverServer(s grpc.ServiceRegistrar, srv LinkSaverServer) {
	// If the following call pancis, it indicates UnimplementedLinkSaverServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LinkSaver_ServiceDesc, srv)
}

func _LinkSaver_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkSaverServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkSaver_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkSaverServer).Save(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkSaver_PickRandom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkSaverServer).PickRandom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkSaver_PickRandom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkSaverServer).PickRandom(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkSaver_PickAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkSaverServer).PickAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkSaver_PickAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkSaverServer).PickAll(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkSaver_IsExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkSaverServer).IsExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkSaver_IsExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkSaverServer).IsExists(ctx, req.(*Page))
	}
	return interceptor(ctx, in, info, handler)
}

// LinkSaver_ServiceDesc is the grpc.ServiceDesc for LinkSaver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinkSaver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "linksaver.LinkSaver",
	HandlerType: (*LinkSaverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _LinkSaver_Save_Handler,
		},
		{
			MethodName: "PickRandom",
			Handler:    _LinkSaver_PickRandom_Handler,
		},
		{
			MethodName: "PickAll",
			Handler:    _LinkSaver_PickAll_Handler,
		},
		{
			MethodName: "IsExists",
			Handler:    _LinkSaver_IsExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/linksaver.proto",
}
